// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Generic;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace Refit.Tests.RefitInternalGenerated
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.IO;
    using System.Threading.Tasks;
    using Microsoft.CodeAnalysis;
    using Microsoft.CodeAnalysis.CSharp;
    using Microsoft.CodeAnalysis.CSharp.Syntax;
    using Refit;
    using Refit.Generator;
    using Xunit;
    using Task =  System.Threading.Tasks.Task;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAmARefitInterfaceButNobodyUsesMe : IAmARefitInterfaceButNobodyUsesMe
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAmARefitInterfaceButNobodyUsesMe(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task IAmARefitInterfaceButNobodyUsesMe.RefitMethod()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("RefitMethod", new Type[] {  });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IAmARefitInterfaceButNobodyUsesMe.AnotherRefitMethod()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("AnotherRefitMethod", new Type[] {  });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IAmARefitInterfaceButNobodyUsesMe.NoConstantsAllowed()
        {
            throw new NotImplementedException("Either this method has no Refit HTTP method attribute or you've used something other than a string literal for the 'path' argument.");
        }

        /// <inheritdoc />
        Task IAmARefitInterfaceButNobodyUsesMe.SpacesShouldntBreakMe()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("SpacesShouldntBreakMe", new Type[] {  });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IAmARefitInterfaceButNobodyUsesMe.ReservedWordsForParameterNames(int @int, string @string, float @long)
        {
            var arguments = new object[] { @int, @string, @long };
            var func = requestBuilder.BuildRestResultFuncForMethod("ReservedWordsForParameterNames", new Type[] { typeof(int), typeof(string), typeof(float) });
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.IO;
    using System.Net;
    using System.Reactive.Linq;
    using System.Reflection;
    using System.Text;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using Refit;
    using RichardSzalay.MockHttp;
    using Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAmHalfRefit : IAmHalfRefit
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAmHalfRefit(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task IAmHalfRefit.Post()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("Post", new Type[] {  });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IAmHalfRefit.Get()
        {
            throw new NotImplementedException("Either this method has no Refit HTTP method attribute or you've used something other than a string literal for the 'path' argument.");
        }
    }
}

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.Threading.Tasks;
    using Refit;
    using static System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAmInterface : IAmInterface
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAmInterface(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<string> IAmInterface.Pang()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("Pang", new Type[] {  });
            return (Task<string>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<string> IAmInterfaceB.Pong()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("Pong", new Type[] {  });
            return (Task<string>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<string> IAmInterfaceD.Test()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("Test", new Type[] {  });
            return (Task<string>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<string> IAmInterfaceA.Ping()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("Ping", new Type[] {  });
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.Threading.Tasks;
    using Refit;
    using static System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAmInterfaceA : IAmInterfaceA
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAmInterfaceA(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<string> IAmInterfaceA.Ping()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("Ping", new Type[] {  });
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.Threading.Tasks;
    using Refit;
    using static System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAmInterfaceB : IAmInterfaceB
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAmInterfaceB(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<string> IAmInterfaceB.Pong()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("Pong", new Type[] {  });
            return (Task<string>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<string> IAmInterfaceD.Test()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("Test", new Type[] {  });
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.Threading.Tasks;
    using Refit;
    using static System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAmInterfaceC : IAmInterfaceC
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAmInterfaceC(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<string> IAmInterfaceC.Pang()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("Pang", new Type[] {  });
            return (Task<string>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<string> IAmInterfaceB.Pong()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("Pong", new Type[] {  });
            return (Task<string>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<string> IAmInterfaceD.Test()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("Test", new Type[] {  });
            return (Task<string>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<string> IAmInterfaceA.Ping()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("Ping", new Type[] {  });
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.Threading.Tasks;
    using Refit;
    using static System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAmInterfaceD : IAmInterfaceD
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAmInterfaceD(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<string> IAmInterfaceD.Test()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("Test", new Type[] {  });
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.IO;
    using System.Net;
    using System.Reactive.Linq;
    using System.Reflection;
    using System.Text;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using Refit;
    using RichardSzalay.MockHttp;
    using Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIApiBindPathToObject : IApiBindPathToObject
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIApiBindPathToObject(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task IApiBindPathToObject.GetFooBars(PathBoundObject request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFooBars", new Type[] { typeof(PathBoundObject) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IApiBindPathToObject.GetBarsByFoo(string id, PathBoundObject request)
        {
            var arguments = new object[] { id, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetBarsByFoo", new Type[] { typeof(string), typeof(PathBoundObject) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IApiBindPathToObject.GetFooBars(PathBoundObject request, string someProperty)
        {
            var arguments = new object[] { request, someProperty };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFooBars", new Type[] { typeof(PathBoundObject), typeof(string) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IApiBindPathToObject.GetBarsByFoo(PathBoundObject request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetBarsByFoo", new Type[] { typeof(PathBoundObject) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IApiBindPathToObject.GetFooBarsDerived(PathBoundDerivedObject request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFooBarsDerived", new Type[] { typeof(PathBoundDerivedObject) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IApiBindPathToObject.GetFoos(PathBoundList request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFoos", new Type[] { typeof(PathBoundList) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IApiBindPathToObject.GetFoos2(List<int> Values)
        {
            var arguments = new object[] { Values };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFoos2", new Type[] { typeof(List<int>) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IApiBindPathToObject.PostFooBar(PathBoundObject request, object someObject)
        {
            var arguments = new object[] { request, someObject };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostFooBar", new Type[] { typeof(PathBoundObject), typeof(object) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IApiBindPathToObject.GetFooBars(PathBoundObjectWithQuery request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFooBars", new Type[] { typeof(PathBoundObjectWithQuery) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IApiBindPathToObject.PostFooBar(PathBoundObject request, ModelObject someQueryParams)
        {
            var arguments = new object[] { request, someQueryParams };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostFooBar", new Type[] { typeof(PathBoundObject), typeof(ModelObject) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IApiBindPathToObject.PostFooBarStreamPart(PathBoundObject request, ModelObject someQueryParams, StreamPart stream)
        {
            var arguments = new object[] { request, someQueryParams, stream };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostFooBarStreamPart", new Type[] { typeof(PathBoundObject), typeof(ModelObject), typeof(StreamPart) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IApiBindPathToObject.PostFooBarStreamPart(PathBoundObject request, StreamPart stream)
        {
            var arguments = new object[] { request, stream };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostFooBarStreamPart", new Type[] { typeof(PathBoundObject), typeof(StreamPart) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IApiBindPathToObject.PostFooBarStreamPart(PathBoundObjectWithQuery request, StreamPart stream)
        {
            var arguments = new object[] { request, stream };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostFooBarStreamPart", new Type[] { typeof(PathBoundObjectWithQuery), typeof(StreamPart) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.IO;
    using System.Net;
    using System.Reactive.Linq;
    using System.Reflection;
    using System.Text;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using Refit;
    using RichardSzalay.MockHttp;
    using Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIApiWithDecimal : IApiWithDecimal
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIApiWithDecimal(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<string> IApiWithDecimal.GetWithDecimal(decimal value)
        {
            var arguments = new object[] { value };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetWithDecimal", new Type[] { typeof(decimal) });
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.IO;
    using System.Net;
    using System.Reactive.Linq;
    using System.Reflection;
    using System.Text;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using Refit;
    using RichardSzalay.MockHttp;
    using Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIBodylessApi : IBodylessApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIBodylessApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task IBodylessApi.Post()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("Post", new Type[] {  });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IBodylessApi.Get()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] {  });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IBodylessApi.Head()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("Head", new Type[] {  });
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.IO;
    using System.Threading.Tasks;
    using Microsoft.CodeAnalysis;
    using Microsoft.CodeAnalysis.CSharp;
    using Microsoft.CodeAnalysis.CSharp.Syntax;
    using Refit;
    using Refit.Generator;
    using Xunit;
    using Task =  System.Threading.Tasks.Task;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIBoringCrudApi<T, TKey>
     : IBoringCrudApi<T, TKey>
        where T : class

    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIBoringCrudApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<T> IBoringCrudApi<T, TKey>.Create(T paylod)
        {
            var arguments = new object[] { paylod };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", new Type[] { typeof(T) });
            return (Task<T>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<T>> IBoringCrudApi<T, TKey>.ReadAll()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadAll", new Type[] {  });
            return (Task<List<T>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<T> IBoringCrudApi<T, TKey>.ReadOne(TKey key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadOne", new Type[] { typeof(TKey) });
            return (Task<T>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IBoringCrudApi<T, TKey>.Update(TKey key, T payload)
        {
            var arguments = new object[] { key, payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", new Type[] { typeof(TKey), typeof(T) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IBoringCrudApi<T, TKey>.Delete(TKey key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(TKey) });
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.IO;
    using System.Net;
    using System.Reactive.Linq;
    using System.Reflection;
    using System.Text;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using Refit;
    using RichardSzalay.MockHttp;
    using Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIBrokenWebApi : IBrokenWebApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIBrokenWebApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<bool> IBrokenWebApi.PostAValue(string derp)
        {
            var arguments = new object[] { derp };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostAValue", new Type[] { typeof(string) });
            return (Task<bool>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.Threading.Tasks;
    using Refit;
    using static System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIDataApiA : IDataApiA
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIDataApiA(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task IDataApiA.PingA()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("PingA", new Type[] {  });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<DataEntity> IDataCrudApi<DataEntity>.Copy(DataEntity payload)
        {
            var arguments = new object[] { payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Copy", new Type[] { typeof(DataEntity) });
            return (Task<DataEntity>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<DataEntity> IDataCrudApi<DataEntity, long>.Create(DataEntity payload)
        {
            var arguments = new object[] { payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", new Type[] { typeof(DataEntity) });
            return (Task<DataEntity>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<DataEntity>> IDataCrudApi<DataEntity, long>.ReadAll()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadAll", new Type[] {  });
            return (Task<List<DataEntity>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<DataEntity> IDataCrudApi<DataEntity, long>.ReadOne(long key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadOne", new Type[] { typeof(long) });
            return (Task<DataEntity>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IDataCrudApi<DataEntity, long>.Update(long key, DataEntity payload)
        {
            var arguments = new object[] { key, payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", new Type[] { typeof(long), typeof(DataEntity) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IDataCrudApi<DataEntity, long>.Delete(long key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(long) });
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.Threading.Tasks;
    using Refit;
    using static System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIDataApiB : IDataApiB
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIDataApiB(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task IDataApiB.PingB()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("PingB", new Type[] {  });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<DataEntity> IDataCrudApi<DataEntity, int>.Create(DataEntity payload)
        {
            var arguments = new object[] { payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", new Type[] { typeof(DataEntity) });
            return (Task<DataEntity>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<DataEntity>> IDataCrudApi<DataEntity, int>.ReadAll()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadAll", new Type[] {  });
            return (Task<List<DataEntity>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<DataEntity> IDataCrudApi<DataEntity, int>.ReadOne(int key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadOne", new Type[] { typeof(int) });
            return (Task<DataEntity>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IDataCrudApi<DataEntity, int>.Update(int key, DataEntity payload)
        {
            var arguments = new object[] { key, payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", new Type[] { typeof(int), typeof(DataEntity) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IDataCrudApi<DataEntity, int>.Delete(int key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(int) });
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.Threading.Tasks;
    using Refit;
    using static System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIDataCrudApi<T>
     : IDataCrudApi<T>
        where T : class

    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIDataCrudApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<T> IDataCrudApi<T>.Copy(T payload)
        {
            var arguments = new object[] { payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Copy", new Type[] { typeof(T) });
            return (Task<T>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<T> IDataCrudApi<T, long>.Create(T payload)
        {
            var arguments = new object[] { payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", new Type[] { typeof(T) });
            return (Task<T>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<T>> IDataCrudApi<T, long>.ReadAll()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadAll", new Type[] {  });
            return (Task<List<T>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<T> IDataCrudApi<T, long>.ReadOne(long key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadOne", new Type[] { typeof(long) });
            return (Task<T>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IDataCrudApi<T, long>.Update(long key, T payload)
        {
            var arguments = new object[] { key, payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", new Type[] { typeof(long), typeof(T) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IDataCrudApi<T, long>.Delete(long key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(long) });
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.Threading.Tasks;
    using Refit;
    using static System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIDataCrudApi<T, TKey>
     : IDataCrudApi<T, TKey>
        where T : class

    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIDataCrudApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<T> IDataCrudApi<T, TKey>.Create(T payload)
        {
            var arguments = new object[] { payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", new Type[] { typeof(T) });
            return (Task<T>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<T>> IDataCrudApi<T, TKey>.ReadAll()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadAll", new Type[] {  });
            return (Task<List<T>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<T> IDataCrudApi<T, TKey>.ReadOne(TKey key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadOne", new Type[] { typeof(TKey) });
            return (Task<T>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IDataCrudApi<T, TKey>.Update(TKey key, T payload)
        {
            var arguments = new object[] { key, payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", new Type[] { typeof(TKey), typeof(T) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IDataCrudApi<T, TKey>.Delete(TKey key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(TKey) });
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.Text;
    using System.Threading.Tasks;
    using Refit;
    using static System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIGitHubApi : IGitHubApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIGitHubApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<User> IGitHubApi.GetUser(string userName)
        {
            var arguments = new object[] { userName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUser", new Type[] { typeof(string) });
            return (Task<User>)func(Client, arguments);
        }

        /// <inheritdoc />
        IObservable<User> IGitHubApi.GetUserObservable(string userName)
        {
            var arguments = new object[] { userName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUserObservable", new Type[] { typeof(string) });
            return (IObservable<User>)func(Client, arguments);
        }

        /// <inheritdoc />
        IObservable<User> IGitHubApi.GetUserCamelCase(string userName)
        {
            var arguments = new object[] { userName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUserCamelCase", new Type[] { typeof(string) });
            return (IObservable<User>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<User>> IGitHubApi.GetOrgMembers(string orgName)
        {
            var arguments = new object[] { orgName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetOrgMembers", new Type[] { typeof(string) });
            return (Task<List<User>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<UserSearchResult> IGitHubApi.FindUsers(string q)
        {
            var arguments = new object[] { q };
            var func = requestBuilder.BuildRestResultFuncForMethod("FindUsers", new Type[] { typeof(string) });
            return (Task<UserSearchResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IGitHubApi.GetIndex()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetIndex", new Type[] {  });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        IObservable<string> IGitHubApi.GetIndexObservable()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetIndexObservable", new Type[] {  });
            return (IObservable<string>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<User> IGitHubApi.NothingToSeeHere()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("NothingToSeeHere", new Type[] {  });
            return (Task<User>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<User>> IGitHubApi.NothingToSeeHereWithMetadata()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("NothingToSeeHereWithMetadata", new Type[] {  });
            return (Task<ApiResponse<User>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<User>> IGitHubApi.GetUserWithMetadata(string userName)
        {
            var arguments = new object[] { userName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUserWithMetadata", new Type[] { typeof(string) });
            return (Task<ApiResponse<User>>)func(Client, arguments);
        }

        /// <inheritdoc />
        IObservable<ApiResponse<User>> IGitHubApi.GetUserObservableWithMetadata(string userName)
        {
            var arguments = new object[] { userName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUserObservableWithMetadata", new Type[] { typeof(string) });
            return (IObservable<ApiResponse<User>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<User> IGitHubApi.CreateUser(User user)
        {
            var arguments = new object[] { user };
            var func = requestBuilder.BuildRestResultFuncForMethod("CreateUser", new Type[] { typeof(User) });
            return (Task<User>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<User>> IGitHubApi.CreateUserWithMetadata(User user)
        {
            var arguments = new object[] { user };
            var func = requestBuilder.BuildRestResultFuncForMethod("CreateUserWithMetadata", new Type[] { typeof(User) });
            return (Task<ApiResponse<User>>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.IO;
    using System.Net;
    using System.Reactive.Linq;
    using System.Reflection;
    using System.Text;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using Refit;
    using RichardSzalay.MockHttp;
    using Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIHttpBinApi<TResponse, TParam, THeader>
     : IHttpBinApi<TResponse, TParam, THeader>
        where TResponse : class
        where THeader : struct

    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIHttpBinApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<TResponse> IHttpBinApi<TResponse, TParam, THeader>.Get(TParam param, THeader header)
        {
            var arguments = new object[] { param, header };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(TParam), typeof(THeader) });
            return (Task<TResponse>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<TResponse> IHttpBinApi<TResponse, TParam, THeader>.GetQuery(TParam param)
        {
            var arguments = new object[] { param };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetQuery", new Type[] { typeof(TParam) });
            return (Task<TResponse>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<TResponse> IHttpBinApi<TResponse, TParam, THeader>.PostQuery(TParam param)
        {
            var arguments = new object[] { param };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostQuery", new Type[] { typeof(TParam) });
            return (Task<TResponse>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<TResponse> IHttpBinApi<TResponse, TParam, THeader>.GetQueryWithIncludeParameterName(TParam param)
        {
            var arguments = new object[] { param };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetQueryWithIncludeParameterName", new Type[] { typeof(TParam) });
            return (Task<TResponse>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<TValue> IHttpBinApi<TResponse, TParam, THeader>.GetQuery1<TValue>(TParam param)
        {
            var arguments = new object[] { param };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetQuery1", new Type[] { typeof(TParam) }, new Type[] { typeof(TValue) });
            return (Task<TValue>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.IO;
    using System.Net;
    using System.Reactive.Linq;
    using System.Reflection;
    using System.Text;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using Refit;
    using RichardSzalay.MockHttp;
    using Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIHttpContentApi : IHttpContentApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIHttpContentApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<HttpContent> IHttpContentApi.PostFileUpload(HttpContent content)
        {
            var arguments = new object[] { content };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostFileUpload", new Type[] { typeof(HttpContent) });
            return (Task<HttpContent>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<HttpContent>> IHttpContentApi.PostFileUploadWithMetadata(HttpContent content)
        {
            var arguments = new object[] { content };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostFileUploadWithMetadata", new Type[] { typeof(HttpContent) });
            return (Task<ApiResponse<HttpContent>>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.Net;
    using System.Text;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using RichardSzalay.MockHttp;
    using Refit;
    using Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedResponseTestsIMyAliasService : ResponseTests.IMyAliasService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedResponseTestsIMyAliasService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<TestAliasObject> ResponseTests.IMyAliasService.GetTestObject()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetTestObject", new Type[] {  });
            return (Task<TestAliasObject>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.Net;
    using System.Text;
    using System.Threading.Tasks;
    using RichardSzalay.MockHttp;
    using Refit;
    using Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedAuthenticatedClientHandlerTestsIMyAuthenticatedService : AuthenticatedClientHandlerTests.IMyAuthenticatedService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedAuthenticatedClientHandlerTestsIMyAuthenticatedService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<string> AuthenticatedClientHandlerTests.IMyAuthenticatedService.GetUnauthenticated()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUnauthenticated", new Type[] {  });
            return (Task<string>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<string> AuthenticatedClientHandlerTests.IMyAuthenticatedService.GetAuthenticated()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAuthenticated", new Type[] {  });
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.Threading.Tasks;
    using SomeType =  CollisionA.SomeType;
    using CollisionB;
    using Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedINamespaceCollisionApi : INamespaceCollisionApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedINamespaceCollisionApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<SomeType> INamespaceCollisionApi.SomeRequest()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("SomeRequest", new Type[] {  });
            return (Task<SomeType>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.Text;
    using System.Threading.Tasks;
    using Refit;
    using static System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedTestNestedINestedGitHubApi : TestNested.INestedGitHubApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedTestNestedINestedGitHubApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<User> TestNested.INestedGitHubApi.GetUser(string userName)
        {
            var arguments = new object[] { userName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUser", new Type[] { typeof(string) });
            return (Task<User>)func(Client, arguments);
        }

        /// <inheritdoc />
        IObservable<User> TestNested.INestedGitHubApi.GetUserObservable(string userName)
        {
            var arguments = new object[] { userName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUserObservable", new Type[] { typeof(string) });
            return (IObservable<User>)func(Client, arguments);
        }

        /// <inheritdoc />
        IObservable<User> TestNested.INestedGitHubApi.GetUserCamelCase(string userName)
        {
            var arguments = new object[] { userName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUserCamelCase", new Type[] { typeof(string) });
            return (IObservable<User>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<User>> TestNested.INestedGitHubApi.GetOrgMembers(string orgName)
        {
            var arguments = new object[] { orgName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetOrgMembers", new Type[] { typeof(string) });
            return (Task<List<User>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<UserSearchResult> TestNested.INestedGitHubApi.FindUsers(string q)
        {
            var arguments = new object[] { q };
            var func = requestBuilder.BuildRestResultFuncForMethod("FindUsers", new Type[] { typeof(string) });
            return (Task<UserSearchResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> TestNested.INestedGitHubApi.GetIndex()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetIndex", new Type[] {  });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        IObservable<string> TestNested.INestedGitHubApi.GetIndexObservable()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetIndexObservable", new Type[] {  });
            return (IObservable<string>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task TestNested.INestedGitHubApi.NothingToSeeHere()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("NothingToSeeHere", new Type[] {  });
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.IO;
    using System.Threading.Tasks;
    using Microsoft.CodeAnalysis;
    using Microsoft.CodeAnalysis.CSharp;
    using Microsoft.CodeAnalysis.CSharp.Syntax;
    using Refit;
    using Refit.Generator;
    using Xunit;
    using Task =  System.Threading.Tasks.Task;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedINonGenericInterfaceWithGenericMethod : INonGenericInterfaceWithGenericMethod
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedINonGenericInterfaceWithGenericMethod(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task INonGenericInterfaceWithGenericMethod.PostMessage<T>(T message)
        {
            var arguments = new object[] { message };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostMessage", new Type[] { typeof(T) }, new Type[] { typeof(T) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task INonGenericInterfaceWithGenericMethod.PostMessage<T, U, V>(T message, U param1, V param2)
        {
            var arguments = new object[] { message, param1, param2 };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostMessage", new Type[] { typeof(T), typeof(U), typeof(V) }, new Type[] { typeof(T), typeof(U), typeof(V) });
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.IO;
    using System.Net;
    using System.Reactive.Linq;
    using System.Reflection;
    using System.Text;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using Refit;
    using RichardSzalay.MockHttp;
    using Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedINpmJs : INpmJs
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedINpmJs(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<RootObject> INpmJs.GetCongruence()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetCongruence", new Type[] {  });
            return (Task<RootObject>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.IO;
    using System.Net;
    using System.Reactive.Linq;
    using System.Reflection;
    using System.Text;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using Refit;
    using RichardSzalay.MockHttp;
    using Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIRequestBin : IRequestBin
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIRequestBin(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task IRequestBin.Post()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("Post", new Type[] {  });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IRequestBin.PostRawStringDefault(string str)
        {
            var arguments = new object[] { str };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostRawStringDefault", new Type[] { typeof(string) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IRequestBin.PostRawStringJson(string str)
        {
            var arguments = new object[] { str };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostRawStringJson", new Type[] { typeof(string) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IRequestBin.PostRawStringUrlEncoded(string str)
        {
            var arguments = new object[] { str };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostRawStringUrlEncoded", new Type[] { typeof(string) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IRequestBin.PostGeneric<T>(T param)
        {
            var arguments = new object[] { param };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostGeneric", new Type[] { typeof(T) }, new Type[] { typeof(T) });
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.IO;
    using System.Net;
    using System.Reflection;
    using System.Threading.Tasks;
    using Xunit;
    using Refit;
    using System.Threading;
    using Newtonsoft.Json;
    using System.Text;
    using System.Net.Http.Headers;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIRunscopeApi : IRunscopeApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIRunscopeApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadStream(Stream stream)
        {
            var arguments = new object[] { stream };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadStream", new Type[] { typeof(Stream) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadStreamWithCustomBoundary(Stream stream)
        {
            var arguments = new object[] { stream };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadStreamWithCustomBoundary", new Type[] { typeof(Stream) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadStreamPart(StreamPart stream)
        {
            var arguments = new object[] { stream };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadStreamPart", new Type[] { typeof(StreamPart) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadStreamPart(ModelObject someQueryParams, StreamPart stream)
        {
            var arguments = new object[] { someQueryParams, stream };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadStreamPart", new Type[] { typeof(ModelObject), typeof(StreamPart) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadBytes(byte[] bytes)
        {
            var arguments = new object[] { bytes };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadBytes", new Type[] { typeof(byte[]) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadBytesPart(ByteArrayPart bytes)
        {
            var arguments = new object[] { bytes };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadBytesPart", new Type[] { typeof(ByteArrayPart) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadString(string someString)
        {
            var arguments = new object[] { someString };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadString", new Type[] { typeof(string) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadFileInfo(IEnumerable<FileInfo> fileInfos, FileInfo anotherFile)
        {
            var arguments = new object[] { fileInfos, anotherFile };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadFileInfo", new Type[] { typeof(IEnumerable<FileInfo>), typeof(FileInfo) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadFileInfoPart(IEnumerable<FileInfoPart> fileInfos, FileInfoPart anotherFile)
        {
            var arguments = new object[] { fileInfos, anotherFile };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadFileInfoPart", new Type[] { typeof(IEnumerable<FileInfoPart>), typeof(FileInfoPart) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadJsonObject(ModelObject theObject)
        {
            var arguments = new object[] { theObject };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadJsonObject", new Type[] { typeof(ModelObject) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadJsonObjects(IEnumerable<ModelObject> theObjects)
        {
            var arguments = new object[] { theObjects };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadJsonObjects", new Type[] { typeof(IEnumerable<ModelObject>) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadMixedObjects(IEnumerable<ModelObject> theObjects, AnotherModel anotherModel, FileInfo aFile, AnEnum anEnum, string aString, int anInt)
        {
            var arguments = new object[] { theObjects, anotherModel, aFile, anEnum, aString, anInt };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadMixedObjects", new Type[] { typeof(IEnumerable<ModelObject>), typeof(AnotherModel), typeof(FileInfo), typeof(AnEnum), typeof(string), typeof(int) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadHttpContent(HttpContent content)
        {
            var arguments = new object[] { content };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadHttpContent", new Type[] { typeof(HttpContent) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }
    }
}

namespace AutoGeneratedIServiceWithoutNamespace
{
    using Refit.Tests.RefitInternalGenerated;
    using System.Text;
    using System.Threading.Tasks;
    using Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIServiceWithoutNamespace : IServiceWithoutNamespace
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIServiceWithoutNamespace(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task IServiceWithoutNamespace.GetRoot()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetRoot", new Type[] {  });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IServiceWithoutNamespace.PostRoot()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostRoot", new Type[] {  });
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.IO;
    using System.Net;
    using System.Reactive.Linq;
    using System.Reflection;
    using System.Text;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using Refit;
    using RichardSzalay.MockHttp;
    using Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIStreamApi : IStreamApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIStreamApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<Stream> IStreamApi.GetRemoteFile(string filename)
        {
            var arguments = new object[] { filename };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetRemoteFile", new Type[] { typeof(string) });
            return (Task<Stream>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<Stream>> IStreamApi.GetRemoteFileWithMetadata(string filename)
        {
            var arguments = new object[] { filename };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetRemoteFileWithMetadata", new Type[] { typeof(string) });
            return (Task<ApiResponse<Stream>>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.IO;
    using System.Net;
    using System.Reactive.Linq;
    using System.Reflection;
    using System.Text;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using Refit;
    using RichardSzalay.MockHttp;
    using Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedITrimTrailingForwardSlashApi : ITrimTrailingForwardSlashApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedITrimTrailingForwardSlashApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task ITrimTrailingForwardSlashApi.Get()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] {  });
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.Threading.Tasks;
    using CollisionA;
    using Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedITypeCollisionApiA : ITypeCollisionApiA
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedITypeCollisionApiA(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<SomeType> ITypeCollisionApiA.SomeARequest()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("SomeARequest", new Type[] {  });
            return (Task<SomeType>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.Threading.Tasks;
    using CollisionB;
    using Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedITypeCollisionApiB : ITypeCollisionApiB
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedITypeCollisionApiB(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<SomeType> ITypeCollisionApiB.SomeBRequest()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("SomeBRequest", new Type[] {  });
            return (Task<SomeType>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.Net;
    using System.Threading.Tasks;
    using Refit;
    using RichardSzalay.MockHttp;
    using Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIUseOverloadedGenericMethods<TResponse, TParam, THeader>
     : IUseOverloadedGenericMethods<TResponse, TParam, THeader>
        where TResponse : class
        where THeader : struct

    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIUseOverloadedGenericMethods(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<string> IUseOverloadedGenericMethods<TResponse, TParam, THeader>.Get()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] {  });
            return (Task<string>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<TResponse> IUseOverloadedGenericMethods<TResponse, TParam, THeader>.Get(TParam param, THeader header)
        {
            var arguments = new object[] { param, header };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(TParam), typeof(THeader) });
            return (Task<TResponse>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<TResponse> IUseOverloadedGenericMethods<TResponse, TParam, THeader>.Get(THeader param, TParam header)
        {
            var arguments = new object[] { param, header };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(THeader), typeof(TParam) });
            return (Task<TResponse>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IUseOverloadedGenericMethods<TResponse, TParam, THeader>.Get(int httpstatuscode)
        {
            var arguments = new object[] { httpstatuscode };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(int) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<TValue> IUseOverloadedGenericMethods<TResponse, TParam, THeader>.Get<TValue>(int someVal)
        {
            var arguments = new object[] { someVal };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(int) }, new Type[] { typeof(TValue) });
            return (Task<TValue>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<TValue> IUseOverloadedGenericMethods<TResponse, TParam, THeader>.Get<TValue, TInput>(TInput input)
        {
            var arguments = new object[] { input };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(TInput) }, new Type[] { typeof(TValue), typeof(TInput) });
            return (Task<TValue>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IUseOverloadedGenericMethods<TResponse, TParam, THeader>.Get<TInput1, TInput2>(TInput1 input1, TInput2 input2)
        {
            var arguments = new object[] { input1, input2 };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(TInput1), typeof(TInput2) }, new Type[] { typeof(TInput1), typeof(TInput2) });
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.Net;
    using System.Threading.Tasks;
    using Refit;
    using RichardSzalay.MockHttp;
    using Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIUseOverloadedMethods : IUseOverloadedMethods
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIUseOverloadedMethods(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<string> IUseOverloadedMethods.Get()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] {  });
            return (Task<string>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IUseOverloadedMethods.Get(int httpstatuscode)
        {
            var arguments = new object[] { httpstatuscode };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(int) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using Refit.Tests.RefitInternalGenerated;
    using System.IO;
    using System.Net;
    using System.Reactive.Linq;
    using System.Reflection;
    using System.Text;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using Refit;
    using RichardSzalay.MockHttp;
    using Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIValidApi : IValidApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIValidApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task IValidApi.Get()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] {  });
            return (Task)func(Client, arguments);
        }
    }
}
